#!/bin/bash -eu
# Copyright (c) 2015, Heye Voecking <heye.voecking+exploit-exercises.com@gmail.com>

source $HOME/common/setup-exploit

encode() {
  xxd -p | tr -d '\n'
}

decode() {
  xxd -p -r
}

encrypt() {
  echo -n $1 | decode | /home/flag14/flag14 -e | encode
}

CIPHERTEXT=$(cat /home/flag14/token | tr -d '\n' | encode)
GUESS=""

echo "Cracking password, trying to find clear text for ciphertext..."
echo "Original ciphertext: $CIPHERTEXT"
LENGTH=$(echo -n $CIPHERTEXT | wc -c)
for I in $(seq 2 2 $LENGTH )
do
  for N in $(seq 0 256)
  do
    NEW_GUESS=$(printf "%s%02x" "${GUESS}" "${N}")
    ENCRYPTED_GUESS=$(encrypt $NEW_GUESS)
    SCORE=$(
      printf "%s\n%s\n" "$ENCRYPTED_GUESS" "$CIPHERTEXT" |
      sed -e 'N;s/^\(.*\).*\n\1.*$/\1/' | tr -d '\n' |
      wc -c
    )
    echo -ne "\r\e[0KGuess ciphertext:    $ENCRYPTED_GUESS"
    if (( $SCORE == $I ))
    then
      GUESS=$NEW_GUESS
      break
    fi
  done
done
echo

TOKEN=$(echo -n $GUESS | decode)

# TODO: For some reason there is an extra byte. Here we get rid of it.
TOKEN=$(<<<$TOKEN head -c 35)

exploit_with_token $TOKEN
